rothschild-vol-surface/
â”œâ”€â”€ ðŸ“‚ config/                  # Centralized configuration
â”‚   â”œâ”€â”€ financial_params.yaml   # Underlyings, maturities, moneyness ranges
â”‚   â”œâ”€â”€ model_params.yaml       # Heston/SVI bounds, NN hyperparameters
â”‚   â”œâ”€â”€ risk_limits.yaml        # Desk-level exposure thresholds
â”‚   â””â”€â”€ stress_scenarios.yaml   # FRTB scenarios (CHF-specific)
â”‚
â”œâ”€â”€ ðŸ“‚ data/                    # Data layer
â”‚   â”œâ”€â”€ connectors/             # Market data integrations
â”‚   â”‚   â”œâ”€â”€ six_connector.py    # SIX Swiss Exchange API
â”‚   â”‚   â”œâ”€â”€ bloomberg_adapter.py# Bloomberg Terminal fallback
â”‚   â”‚   â””â”€â”€ mock_generator.py   # Synthetic Swiss options data
â”‚   â”‚
â”‚   â”œâ”€â”€ storage/                # Data persistence
â”‚   â”‚   â”œâ”€â”€ delta_lake_writer.py# Atomic writes to S3
â”‚   â”‚   â””â”€â”€ redis_cache.py      # Low-latency surface caching
â”‚   â”‚
â”‚   â””â”€â”€ validation/             # Data quality
â”‚       â”œâ”€â”€ schema_validator.py # Avro schemas for options data
â”‚       â””â”€â”€ drift_monitor.py    # Statistical data drift detection
â”‚
â”œâ”€â”€ ðŸ“‚ pricing/                 # Core quant models
â”‚   â”œâ”€â”€ analytic/               # Parametric models
â”‚   â”‚   â”œâ”€â”€ black_scholes.py    # With CHF dividend handling
â”‚   â”‚   â”œâ”€â”€ heston_calibrator.py# FINMA-compliant calibration
â”‚   â”‚   â””â”€â”€ svi_model.py        # UBS-style surface parameterization
â”‚   â”‚
â”‚   â”œâ”€â”€ ml_correction/          # AI enhancement
â”‚   â”‚   â”œâ”€â”€ nn_vol_corrector.py # LSTM residual model
â”‚   â”‚   â”œâ”€â”€ feature_engineer.py # Moneyness/volume/VIX features
â”‚   â”‚   â””â”€â”€ shap_explainer.py   # Model explainability
â”‚   â”‚
â”‚   â””â”€â”€ surface_builder/        # Surface construction
â”‚       â”œâ”€â”€ spline_interpolator.py # Arbitrage-free interpolation
â”‚       â””â”€â”€ variance_proxy.py   # Liquid instrument fusion
â”‚
â”œâ”€â”€ ðŸ“‚ risk/                    # Banking compliance
â”‚   â”œâ”€â”€ frtb_engine/            # Basel IV implementation
â”‚   â”‚   â”œâ”€â”€ capital_calculator.py# SA-CCR computations
â”‚   â”‚   â”œâ”€â”€ stress_applier.py   # Scenario application
â”‚   â”‚   â””â”€â”€ finma_adapter.py    # Swiss regulatory adjustments
â”‚   â”‚
â”‚   â”œâ”€â”€ exposure/               # Risk measurement
â”‚   â”‚   â”œâ”€â”€ greeks_calculator.py# Portfolio sensitivities
â”‚   â”‚   â””â”€â”€ var_engine.py       # Historical/parametric VaR
â”‚   â”‚
â”‚   â””â”€â”€ validation/             # Model validation
â”‚       â”œâ”€â”€ arbitrage_checks.py # Static/dynamic arbitrage tests
â”‚       â””â”€â”€ backtester.py       # Historical scenario testing
â”‚
â”œâ”€â”€ ðŸ“‚ infrastructure/          # Cloud operations
â”‚   â”œâ”€â”€ aws/                    # Infrastructure-as-Code
â”‚   â”‚   â”œâ”€â”€ lambda_calibration.tf # Serverless calibration
â”‚   â”‚   â”œâ”€â”€ emr_cluster.tf      # Spark processing
â”‚   â”‚   â””â”€â”€ vpc_network.tf      # Zurich-optimized networking
â”‚   â”‚
â”‚   â”œâ”€â”€ docker/                 # Containerization
â”‚   â”‚   â”œâ”€â”€ calibration.Dockerfile # GPU-enabled image
â”‚   â”‚   â””â”€â”€ frtb.Dockerfile     # Lightweight risk engine
â”‚   â”‚
â”‚   â””â”€â”€ monitoring/             # Observability
â”‚       â”œâ”€â”€ cloudwatch_setup.py # Metrics dashboard
â”‚       â””â”€â”€ alert_manager.py    # Threshold-based alerts
â”‚
â”œâ”€â”€ ðŸ“‚ reporting/               # Business interfaces
â”‚   â”œâ”€â”€ powerbi/                # Dashboards
â”‚   â”‚   â”œâ”€â”€ surface_dashboard.pbit # Live surface visualization
â”‚   â”‚   â””â”€â”€ risk_exposure.pbit  # Capital charge analysis
â”‚   â”‚
â”‚   â”œâ”€â”€ notebooks/              # Analysis
â”‚   â”‚   â”œâ”€â”€ surface_analysis.ipynb # Interactive exploration
â”‚   â”‚   â””â”€â”€ frtb_validation.ipynb  # Compliance reporting
â”‚   â”‚
â”‚   â””â”€â”€ compliance/             # Regulatory output
â”‚       â”œâ”€â”€ pdf_generator.py    # Audit-ready reports
â”‚       â””â”€â”€ finma_submitter.py  # FINMA submission format
â”‚
â”œâ”€â”€ ðŸ“‚ scripts/                 # Operational workflows
â”‚   â”œâ”€â”€ run_calibration.py      # End-to-end surface generation
â”‚   â”œâ”€â”€ daily_frtb.py           # Regulatory capital calculation
â”‚   â””â”€â”€ deploy_infra.py         # Terraform/CDK deployment
â”‚
â”œâ”€â”€ ðŸ“‚ tests/                   # Validation suite
â”‚   â”œâ”€â”€ unit/                   # Isolated tests
â”‚   â”‚   â”œâ”€â”€ test_black_scholes.py
â”‚   â”‚   â”œâ”€â”€ test_heston.py
â”‚   â”‚   â””â”€â”€ test_nn_corrector.py
â”‚   â”‚
â”‚   â””â”€â”€ integration/            # System tests
â”‚       â”œâ”€â”€ test_calibration_pipeline.py
â”‚       â””â”€â”€ test_frtb_engine.py
â”‚
â”œâ”€â”€ ðŸ“œ main.py                  # CLI entry point
â”œâ”€â”€ ðŸ“œ Makefile                 # Build automation
â”œâ”€â”€ ðŸ“œ requirements.txt         # Python dependencies
â”œâ”€â”€ ðŸ“œ infrastructure.tfvars    # Environment variables
â””â”€â”€ ðŸ“œ README.md                # Project documentation